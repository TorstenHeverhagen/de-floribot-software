/* Auto-generated by genmsg_cpp for file /home/floribot/ros_workspace/ptu_control/msg/PtuGotoGoal.msg */
#ifndef PTU_CONTROL_MESSAGE_PTUGOTOGOAL_H
#define PTU_CONTROL_MESSAGE_PTUGOTOGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ptu_control
{
template <class ContainerAllocator>
struct PtuGotoGoal_ {
  typedef PtuGotoGoal_<ContainerAllocator> Type;

  PtuGotoGoal_()
  : pan(0.0)
  , tilt(0.0)
  , pan_vel(0.0)
  , tilt_vel(0.0)
  {
  }

  PtuGotoGoal_(const ContainerAllocator& _alloc)
  : pan(0.0)
  , tilt(0.0)
  , pan_vel(0.0)
  , tilt_vel(0.0)
  {
  }

  typedef float _pan_type;
  float pan;

  typedef float _tilt_type;
  float tilt;

  typedef float _pan_vel_type;
  float pan_vel;

  typedef float _tilt_vel_type;
  float tilt_vel;


  typedef boost::shared_ptr< ::ptu_control::PtuGotoGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ptu_control::PtuGotoGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PtuGotoGoal
typedef  ::ptu_control::PtuGotoGoal_<std::allocator<void> > PtuGotoGoal;

typedef boost::shared_ptr< ::ptu_control::PtuGotoGoal> PtuGotoGoalPtr;
typedef boost::shared_ptr< ::ptu_control::PtuGotoGoal const> PtuGotoGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ptu_control::PtuGotoGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ptu_control::PtuGotoGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ptu_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ptu_control::PtuGotoGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ptu_control::PtuGotoGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ptu_control::PtuGotoGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3081c5893ca658a36b6caa436091a00d";
  }

  static const char* value(const  ::ptu_control::PtuGotoGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3081c5893ca658a3ULL;
  static const uint64_t static_value2 = 0x6b6caa436091a00dULL;
};

template<class ContainerAllocator>
struct DataType< ::ptu_control::PtuGotoGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptu_control/PtuGotoGoal";
  }

  static const char* value(const  ::ptu_control::PtuGotoGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ptu_control::PtuGotoGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# goal\n\
float32 pan\n\
float32 tilt\n\
float32 pan_vel\n\
float32 tilt_vel\n\
\n\
";
  }

  static const char* value(const  ::ptu_control::PtuGotoGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ptu_control::PtuGotoGoal_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ptu_control::PtuGotoGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pan);
    stream.next(m.tilt);
    stream.next(m.pan_vel);
    stream.next(m.tilt_vel);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PtuGotoGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ptu_control::PtuGotoGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ptu_control::PtuGotoGoal_<ContainerAllocator> & v) 
  {
    s << indent << "pan: ";
    Printer<float>::stream(s, indent + "  ", v.pan);
    s << indent << "tilt: ";
    Printer<float>::stream(s, indent + "  ", v.tilt);
    s << indent << "pan_vel: ";
    Printer<float>::stream(s, indent + "  ", v.pan_vel);
    s << indent << "tilt_vel: ";
    Printer<float>::stream(s, indent + "  ", v.tilt_vel);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PTU_CONTROL_MESSAGE_PTUGOTOGOAL_H

