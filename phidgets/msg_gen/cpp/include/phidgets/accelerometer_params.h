/* Auto-generated by genmsg_cpp for file /home/floribot/ros_workspace/phidgets/msg/accelerometer_params.msg */
#ifndef PHIDGETS_MESSAGE_ACCELEROMETER_PARAMS_H
#define PHIDGETS_MESSAGE_ACCELEROMETER_PARAMS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace phidgets
{
template <class ContainerAllocator>
struct accelerometer_params_ {
  typedef accelerometer_params_<ContainerAllocator> Type;

  accelerometer_params_()
  : header()
  , acceleration()
  , orientation()
  , stamp()
  {
  }

  accelerometer_params_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , acceleration(_alloc)
  , orientation(_alloc)
  , stamp(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _acceleration_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  acceleration;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _orientation_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  orientation;

  typedef std::vector<ros::Time, typename ContainerAllocator::template rebind<ros::Time>::other >  _stamp_type;
  std::vector<ros::Time, typename ContainerAllocator::template rebind<ros::Time>::other >  stamp;


  typedef boost::shared_ptr< ::phidgets::accelerometer_params_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::phidgets::accelerometer_params_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct accelerometer_params
typedef  ::phidgets::accelerometer_params_<std::allocator<void> > accelerometer_params;

typedef boost::shared_ptr< ::phidgets::accelerometer_params> accelerometer_paramsPtr;
typedef boost::shared_ptr< ::phidgets::accelerometer_params const> accelerometer_paramsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::phidgets::accelerometer_params_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::phidgets::accelerometer_params_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace phidgets

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::phidgets::accelerometer_params_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::phidgets::accelerometer_params_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::phidgets::accelerometer_params_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e2df6f0c8bfad509d688e1e12caabe0d";
  }

  static const char* value(const  ::phidgets::accelerometer_params_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe2df6f0c8bfad509ULL;
  static const uint64_t static_value2 = 0xd688e1e12caabe0dULL;
};

template<class ContainerAllocator>
struct DataType< ::phidgets::accelerometer_params_<ContainerAllocator> > {
  static const char* value() 
  {
    return "phidgets/accelerometer_params";
  }

  static const char* value(const  ::phidgets::accelerometer_params_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::phidgets::accelerometer_params_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
float64[] acceleration\n\
float64[] orientation\n\
time[] stamp\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::phidgets::accelerometer_params_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::phidgets::accelerometer_params_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::phidgets::accelerometer_params_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::phidgets::accelerometer_params_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.acceleration);
    stream.next(m.orientation);
    stream.next(m.stamp);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct accelerometer_params_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::phidgets::accelerometer_params_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::phidgets::accelerometer_params_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "acceleration[]" << std::endl;
    for (size_t i = 0; i < v.acceleration.size(); ++i)
    {
      s << indent << "  acceleration[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.acceleration[i]);
    }
    s << indent << "orientation[]" << std::endl;
    for (size_t i = 0; i < v.orientation.size(); ++i)
    {
      s << indent << "  orientation[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.orientation[i]);
    }
    s << indent << "stamp[]" << std::endl;
    for (size_t i = 0; i < v.stamp.size(); ++i)
    {
      s << indent << "  stamp[" << i << "]: ";
      Printer<ros::Time>::stream(s, indent + "  ", v.stamp[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // PHIDGETS_MESSAGE_ACCELEROMETER_PARAMS_H

