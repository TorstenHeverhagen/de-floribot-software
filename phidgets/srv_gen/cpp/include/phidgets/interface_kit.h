/* Auto-generated by genmsg_cpp for file /home/floribot/ros_workspace/phidgets/srv/interface_kit.srv */
#ifndef PHIDGETS_SERVICE_INTERFACE_KIT_H
#define PHIDGETS_SERVICE_INTERFACE_KIT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace phidgets
{
template <class ContainerAllocator>
struct interface_kitRequest_ {
  typedef interface_kitRequest_<ContainerAllocator> Type;

  interface_kitRequest_()
  : index(0)
  , value_type(0)
  , value(0)
  {
  }

  interface_kitRequest_(const ContainerAllocator& _alloc)
  : index(0)
  , value_type(0)
  , value(0)
  {
  }

  typedef int32_t _index_type;
  int32_t index;

  typedef int32_t _value_type_type;
  int32_t value_type;

  typedef int32_t _value_type;
  int32_t value;


  typedef boost::shared_ptr< ::phidgets::interface_kitRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::phidgets::interface_kitRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct interface_kitRequest
typedef  ::phidgets::interface_kitRequest_<std::allocator<void> > interface_kitRequest;

typedef boost::shared_ptr< ::phidgets::interface_kitRequest> interface_kitRequestPtr;
typedef boost::shared_ptr< ::phidgets::interface_kitRequest const> interface_kitRequestConstPtr;


template <class ContainerAllocator>
struct interface_kitResponse_ {
  typedef interface_kitResponse_<ContainerAllocator> Type;

  interface_kitResponse_()
  : ack(0)
  {
  }

  interface_kitResponse_(const ContainerAllocator& _alloc)
  : ack(0)
  {
  }

  typedef int32_t _ack_type;
  int32_t ack;


  typedef boost::shared_ptr< ::phidgets::interface_kitResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::phidgets::interface_kitResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct interface_kitResponse
typedef  ::phidgets::interface_kitResponse_<std::allocator<void> > interface_kitResponse;

typedef boost::shared_ptr< ::phidgets::interface_kitResponse> interface_kitResponsePtr;
typedef boost::shared_ptr< ::phidgets::interface_kitResponse const> interface_kitResponseConstPtr;

struct interface_kit
{

typedef interface_kitRequest Request;
typedef interface_kitResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct interface_kit
} // namespace phidgets

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::phidgets::interface_kitRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::phidgets::interface_kitRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::phidgets::interface_kitRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "225c9deaf4e7ddb1539c5a9bdaa7a28f";
  }

  static const char* value(const  ::phidgets::interface_kitRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x225c9deaf4e7ddb1ULL;
  static const uint64_t static_value2 = 0x539c5a9bdaa7a28fULL;
};

template<class ContainerAllocator>
struct DataType< ::phidgets::interface_kitRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "phidgets/interface_kitRequest";
  }

  static const char* value(const  ::phidgets::interface_kitRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::phidgets::interface_kitRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 index\n\
int32 value_type\n\
int32 value\n\
\n\
";
  }

  static const char* value(const  ::phidgets::interface_kitRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::phidgets::interface_kitRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::phidgets::interface_kitResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::phidgets::interface_kitResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::phidgets::interface_kitResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "35e806e08fe8e25fde5b4c88fa52f05b";
  }

  static const char* value(const  ::phidgets::interface_kitResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x35e806e08fe8e25fULL;
  static const uint64_t static_value2 = 0xde5b4c88fa52f05bULL;
};

template<class ContainerAllocator>
struct DataType< ::phidgets::interface_kitResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "phidgets/interface_kitResponse";
  }

  static const char* value(const  ::phidgets::interface_kitResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::phidgets::interface_kitResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 ack\n\
\n\
\n\
";
  }

  static const char* value(const  ::phidgets::interface_kitResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::phidgets::interface_kitResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::phidgets::interface_kitRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.index);
    stream.next(m.value_type);
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct interface_kitRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::phidgets::interface_kitResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ack);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct interface_kitResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<phidgets::interface_kit> {
  static const char* value() 
  {
    return "75cbd2a6abfcf442181c14de3598b662";
  }

  static const char* value(const phidgets::interface_kit&) { return value(); } 
};

template<>
struct DataType<phidgets::interface_kit> {
  static const char* value() 
  {
    return "phidgets/interface_kit";
  }

  static const char* value(const phidgets::interface_kit&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<phidgets::interface_kitRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "75cbd2a6abfcf442181c14de3598b662";
  }

  static const char* value(const phidgets::interface_kitRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<phidgets::interface_kitRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "phidgets/interface_kit";
  }

  static const char* value(const phidgets::interface_kitRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<phidgets::interface_kitResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "75cbd2a6abfcf442181c14de3598b662";
  }

  static const char* value(const phidgets::interface_kitResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<phidgets::interface_kitResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "phidgets/interface_kit";
  }

  static const char* value(const phidgets::interface_kitResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PHIDGETS_SERVICE_INTERFACE_KIT_H

