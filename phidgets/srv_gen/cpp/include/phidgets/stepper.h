/* Auto-generated by genmsg_cpp for file /home/floribot/ros_workspace/phidgets/srv/stepper.srv */
#ifndef PHIDGETS_SERVICE_STEPPER_H
#define PHIDGETS_SERVICE_STEPPER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace phidgets
{
template <class ContainerAllocator>
struct stepperRequest_ {
  typedef stepperRequest_<ContainerAllocator> Type;

  stepperRequest_()
  : index(0)
  , engage(false)
  , velocity(0.0)
  , acceleration(0.0)
  , position(0)
  , reset_position(false)
  {
  }

  stepperRequest_(const ContainerAllocator& _alloc)
  : index(0)
  , engage(false)
  , velocity(0.0)
  , acceleration(0.0)
  , position(0)
  , reset_position(false)
  {
  }

  typedef int32_t _index_type;
  int32_t index;

  typedef uint8_t _engage_type;
  uint8_t engage;

  typedef float _velocity_type;
  float velocity;

  typedef float _acceleration_type;
  float acceleration;

  typedef int64_t _position_type;
  int64_t position;

  typedef uint8_t _reset_position_type;
  uint8_t reset_position;


  typedef boost::shared_ptr< ::phidgets::stepperRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::phidgets::stepperRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct stepperRequest
typedef  ::phidgets::stepperRequest_<std::allocator<void> > stepperRequest;

typedef boost::shared_ptr< ::phidgets::stepperRequest> stepperRequestPtr;
typedef boost::shared_ptr< ::phidgets::stepperRequest const> stepperRequestConstPtr;


template <class ContainerAllocator>
struct stepperResponse_ {
  typedef stepperResponse_<ContainerAllocator> Type;

  stepperResponse_()
  : ack(0)
  {
  }

  stepperResponse_(const ContainerAllocator& _alloc)
  : ack(0)
  {
  }

  typedef int32_t _ack_type;
  int32_t ack;


  typedef boost::shared_ptr< ::phidgets::stepperResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::phidgets::stepperResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct stepperResponse
typedef  ::phidgets::stepperResponse_<std::allocator<void> > stepperResponse;

typedef boost::shared_ptr< ::phidgets::stepperResponse> stepperResponsePtr;
typedef boost::shared_ptr< ::phidgets::stepperResponse const> stepperResponseConstPtr;

struct stepper
{

typedef stepperRequest Request;
typedef stepperResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct stepper
} // namespace phidgets

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::phidgets::stepperRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::phidgets::stepperRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::phidgets::stepperRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2037ae654e5666b77a4cc13acf185eec";
  }

  static const char* value(const  ::phidgets::stepperRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2037ae654e5666b7ULL;
  static const uint64_t static_value2 = 0x7a4cc13acf185eecULL;
};

template<class ContainerAllocator>
struct DataType< ::phidgets::stepperRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "phidgets/stepperRequest";
  }

  static const char* value(const  ::phidgets::stepperRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::phidgets::stepperRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 index\n\
bool engage\n\
float32 velocity\n\
float32 acceleration\n\
int64 position\n\
bool reset_position\n\
\n\
";
  }

  static const char* value(const  ::phidgets::stepperRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::phidgets::stepperRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::phidgets::stepperResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::phidgets::stepperResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::phidgets::stepperResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "35e806e08fe8e25fde5b4c88fa52f05b";
  }

  static const char* value(const  ::phidgets::stepperResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x35e806e08fe8e25fULL;
  static const uint64_t static_value2 = 0xde5b4c88fa52f05bULL;
};

template<class ContainerAllocator>
struct DataType< ::phidgets::stepperResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "phidgets/stepperResponse";
  }

  static const char* value(const  ::phidgets::stepperResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::phidgets::stepperResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 ack\n\
\n\
\n\
";
  }

  static const char* value(const  ::phidgets::stepperResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::phidgets::stepperResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::phidgets::stepperRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.index);
    stream.next(m.engage);
    stream.next(m.velocity);
    stream.next(m.acceleration);
    stream.next(m.position);
    stream.next(m.reset_position);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct stepperRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::phidgets::stepperResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ack);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct stepperResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<phidgets::stepper> {
  static const char* value() 
  {
    return "4072c02b1e0ebcc1552d02f11a06dcf5";
  }

  static const char* value(const phidgets::stepper&) { return value(); } 
};

template<>
struct DataType<phidgets::stepper> {
  static const char* value() 
  {
    return "phidgets/stepper";
  }

  static const char* value(const phidgets::stepper&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<phidgets::stepperRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4072c02b1e0ebcc1552d02f11a06dcf5";
  }

  static const char* value(const phidgets::stepperRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<phidgets::stepperRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "phidgets/stepper";
  }

  static const char* value(const phidgets::stepperRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<phidgets::stepperResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4072c02b1e0ebcc1552d02f11a06dcf5";
  }

  static const char* value(const phidgets::stepperResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<phidgets::stepperResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "phidgets/stepper";
  }

  static const char* value(const phidgets::stepperResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PHIDGETS_SERVICE_STEPPER_H

